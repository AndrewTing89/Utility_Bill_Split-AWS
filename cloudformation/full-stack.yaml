AWSTemplateFormatVersion: '2010-09-09'
Description: 'PG&E Bill Split Automation - Complete AWS Infrastructure with Web UI'

Parameters:
  ProjectName:
    Type: String
    Default: 'pge-bill-automation'
    Description: 'Name for the project resources'
  
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'prod']
    Description: 'Environment (dev or prod)'
  
  GitHubRepoUrl:
    Type: String
    Default: 'https://github.com/AndrewTing89/Utility_Bill_Split-AWS'
    Description: 'GitHub repository URL for App Runner'

Resources:
  # S3 Bucket for PDF storage
  PDFBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-pdfs-${Environment}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # DynamoDB Table for Bills
  BillsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-bills-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: 'bill_id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'bill_id'
          KeyType: 'HASH'

  # Secrets Manager for configuration
  ConfigSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ProjectName}-config-${Environment}'
      Description: 'Configuration settings for PG&E automation'
      SecretString: !Sub |
        {
          "gmail_user": "andrewhting@gmail.com",
          "roommate_email": "loushic@gmail.com",
          "my_email": "andrewhting@gmail.com",
          "roommate_venmo": "UshiLo",
          "my_venmo": "andrewhting",
          "my_phone": "+19298884132",
          "roommate_split_ratio": 0.333333,
          "my_split_ratio": 0.666667,
          "test_mode": true,
          "enable_email_notifications": true,
          "enable_text_messaging": true
        }

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: 'PGEAutomationPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # DynamoDB permissions
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt BillsTable.Arn
              # S3 permissions
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub 'arn:aws:s3:::${PDFBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub 'arn:aws:s3:::${PDFBucket}'
              # SES permissions
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'
              # SNS permissions for SMS
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: '*'
              # Secrets Manager permissions
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref ConfigSecrets

  # IAM Role for App Runner
  AppRunnerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-apprunner-instance-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: tasks.apprunner.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 'WebUIPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # DynamoDB permissions for web UI
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt BillsTable.Arn
              # Lambda invoke permissions
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectName}-automation-${Environment}'
              # Secrets Manager permissions
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref ConfigSecrets

  # App Runner Access Role (for accessing ECR/GitHub)
  AppRunnerAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-apprunner-access-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: build.apprunner.amazonaws.com
            Action: sts:AssumeRole

  # Lambda Function
  AutomationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-automation-${Environment}'
      Runtime: python3.9
      Handler: lambda_handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 900  # 15 minutes
      MemorySize: 512
      Environment:
        Variables:
          BILLS_TABLE: !Ref BillsTable
          PDF_BUCKET: !Ref PDFBucket
          SECRETS_ARN: !Ref ConfigSecrets
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': 'Placeholder - will be replaced with actual code'
              }

  # App Runner Service for Web UI
  WebUIService:
    Type: AWS::AppRunner::Service
    Properties:
      ServiceName: !Sub '${ProjectName}-web-${Environment}'
      SourceConfiguration:
        AutoDeploymentsEnabled: true
        CodeRepository:
          RepositoryUrl: !Ref GitHubRepoUrl
          SourceCodeVersion:
            Type: BRANCH
            Value: main
          CodeConfiguration:
            ConfigurationSource: API
            CodeConfigurationValues:
              Runtime: PYTHON_3
              BuildCommand: 'pip install -r web-ui/requirements.txt'
              StartCommand: 'cd web-ui && python app_aws.py'
              Port: 8080
              RuntimeEnvironmentVariables:
                - Name: PORT
                  Value: '8080'
                - Name: FLASK_ENV
                  Value: 'production'
                - Name: AWS_REGION
                  Value: !Ref 'AWS::Region'
                - Name: BILLS_TABLE
                  Value: !Ref BillsTable
                - Name: LAMBDA_FUNCTION
                  Value: !Ref AutomationFunction
                - Name: SECRETS_ARN
                  Value: !Ref ConfigSecrets
        AccessRoleArn: !GetAtt AppRunnerAccessRole.Arn
      InstanceConfiguration:
        Cpu: 0.25 vCPU
        Memory: 0.5 GB
        InstanceRoleArn: !GetAtt AppRunnerInstanceRole.Arn
      HealthCheckConfiguration:
        Protocol: HTTP
        Path: /health
        Interval: 20
        Timeout: 10
        HealthyThreshold: 1
        UnhealthyThreshold: 5

  # EventBridge Rule for monthly trigger (optional - for Lambda automation)
  MonthlyScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${ProjectName}-monthly-schedule-${Environment}'
      Description: 'Trigger PG&E automation on 5th of each month'
      ScheduleExpression: 'cron(0 17 5 * ? *)'  # 5th day, 5PM UTC (9AM PST)
      State: ENABLED
      Targets:
        - Arn: !GetAtt AutomationFunction.Arn
          Id: 'AutomationTarget'
          Input: !Sub |
            {
              "source": "eventbridge",
              "detail-type": "Scheduled Event", 
              "detail": {
                "trigger": "monthly",
                "test_mode": false
              }
            }

  # Permission for EventBridge to invoke Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AutomationFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MonthlyScheduleRule.Arn

Outputs:
  LambdaFunctionArn:
    Description: 'ARN of the Lambda function'
    Value: !GetAtt AutomationFunction.Arn

  S3BucketName:
    Description: 'Name of the S3 bucket for PDFs'
    Value: !Ref PDFBucket

  BillsTableName:
    Description: 'Name of the DynamoDB bills table'
    Value: !Ref BillsTable

  WebUIUrl:
    Description: 'URL of the web interface'
    Value: !Sub 'https://${WebUIService.ServiceUrl}'

  WebUIServiceArn:
    Description: 'ARN of the App Runner service'
    Value: !GetAtt WebUIService.ServiceArn